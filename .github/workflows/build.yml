name: Build + Test

on:
  push:
    branches:
      - main
      - \d+\.x
  pull_request:

env:
  IsForkedRepository: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository }}
  DotNetVersion: '6.0.100'

jobs:
  determinePublicationType:
    runs-on: ubuntu-latest
    
    outputs:
      publishToNuget: ${{ github.event_name == 'push' && steps.version-regex.outputs.match != '' }}
      publishToGithubPackages: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      
    steps:
      - name: Determine type of publication
        uses: actions-ecosystem/action-regex-match@v2.0.2
        id: version-regex
        with:
          text: ${{ github.ref }}
          regex: '^refs/heads/\d+\.x$'

  build:
    runs-on: ubuntu-latest

    outputs:
      semVer2: ${{ steps.nbgv.outputs.SemVer2 }}
      isPreviewRelease: ${{ startsWith(steps.nbgv.outputs.PrereleaseVersionNoLeadingHyphen, 'preview') }}
      isStableRelease: ${{ steps.nbgv.outputs.PrereleaseVersionNoLeadingHyphen == '' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: 'true'

    - name: Install dotnet-validate
      run: dotnet tool install -g dotnet-validate --version 0.0.1-preview.280

    - name: Determine semantic version
      uses: dotnet/nbgv@master
      id: nbgv

    - name: Build
      run: dotnet build --configuration Release -p:ContinuousIntegrationBuild=true

    - name: Validate nuget packages
      run: dotnet validate package local **/ExRam.*.nupkg

    - name: Copy NuGet packages to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: NuGetPackages
        path: ./**/ExRam.*.nupkg
        if-no-files-found: error

  test-linux:
    runs-on: ubuntu-latest

    services:
      gremlinServer:
        image: tinkerpop/gremlin-server
        ports:
          - 8182:8182
      janusgraph:
        image: janusgraph/janusgraph
        ports:
          - 8183:8182

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: 'true'

    - name: Test
      run: dotnet test  --configuration Release --verbosity normal -p:RunGremlinServerIntegrationTests=${{ env.IsForkedRepository == 'false' }} -p:RunJanusGraphIntegrationTests=${{ env.IsForkedRepository == 'false' }}

    - name: Copy *.received-files to artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-linux-received-snapshots
        path: ./**/*.received.*

  test-windows:
    runs-on: windows-2022

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: 'true'
        
    - name: Start CosmosDb Emulator
      uses: Gremlinq/cosmos-emulator-github-action@EnableGremlin

    - name: Test
      run: dotnet test  --configuration Release --verbosity normal -p:RunCosmosDbEmulatorIntegrationTests=${{ env.IsForkedRepository == 'false' }}

    - name: Copy *.received-files to artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-windows-received-snapshots
        path: ./**/*.received.*

  create-snapshot-fix-pr:
    if: ${{ always() && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [ test-linux, test-windows ]
    env:
      pr-message: 'Fix snapshots for #${{ github.event.number }}.'

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      continue-on-error: true
      with:
        name: test-linux-received-snapshots
        
    - uses: actions/download-artifact@v2
      continue-on-error: true
      with:
        name: test-windows-received-snapshots

    - name: Rename received files
      run: find . -type f -name '*.received.*' | while read FILE ; do newfile="$(echo ${FILE} |sed -e 's/received/verified/')"; mv "${FILE}" "${newfile}"; done 

    - name: Create snapshot changes pull request
      uses: peter-evans/create-pull-request@v3
      with:
        commit-message: ${{ env.pr-message }}
        title: ${{ env.pr-message }}
        body: ${{ env.pr-message }}
        base: ${{ github.head_ref }}
        branch-suffix: short-commit-hash

  publish:
    needs: [ determinePublicationType, build, test-linux, test-windows ]
    runs-on: ubuntu-latest
    if: ${{ needs.determinePublicationType.outputs.publishToNuget == 'true' || needs.determinePublicationType.outputs.publishToGithubPackages == 'true' }}

    steps:

    - uses: actions/download-artifact@v2
      with:
        name: NuGetPackages

    - name: Push NuGet packages to GitHub packages
      if: ${{ needs.determinePublicationType.outputs.publishToGithubPackages == 'true' }}
      run: dotnet nuget push **/ExRam.*.nupkg
        --source https://nuget.pkg.github.com/exram/index.json
        --api-key ${{ secrets.GITHUB_TOKEN }}
        --no-symbols
        --skip-duplicate

    - name: Push NuGet packages to NuGet.org
      if: ${{ needs.determinePublicationType.outputs.publishToNuget == 'true' }}
      run: dotnet nuget push **/ExRam.*.nupkg
        --source https://api.nuget.org/v3/index.json
        --api-key ${{ secrets.NUGET_DEPLOY_KEY }}
        --no-symbols
        --skip-duplicate

  cleanup:
    needs: [ publish ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name: [ExRam.Gremlinq.Core, ExRam.Gremlinq.Core.AspNet, ExRam.Gremlinq.Providers.WebSocket, ExRam.Gremlinq.Providers.WebSocket.AspNet, ExRam.Gremlinq.Providers.Core, ExRam.Gremlinq.Providers.Neptune.AspNet, ExRam.Gremlinq.Providers.Neptune, ExRam.Gremlinq.Providers.Core.AspNet, ExRam.Gremlinq.Providers.CosmosDb, ExRam.Gremlinq.Providers.CosmosDb.AspNet, ExRam.Gremlinq.Providers.GremlinServer.AspNet, ExRam.Gremlinq.Providers.GremlinServer, ExRam.Gremlinq.Providers.JanusGraph.AspNet, ExRam.Gremlinq.Providers.JanusGraph]
    
    steps:
    - uses: actions/delete-package-versions@v2
      continue-on-error: true
      with:
        package-name: ${{ matrix.name }}
        min-versions-to-keep: 10

  announce:
    needs: [ determinePublicationType, build, publish ]
    runs-on: ubuntu-latest
    if: ${{ needs.determinePublicationType.outputs.publishToNuget == 'true' }}

    steps:
    - name: Draft release
      uses: release-drafter/release-drafter@v5.17.6
      with:
        name: ExRam.Gremlinq ${{ needs.build.outputs.semVer2 }}
        prerelease: ${{ needs.build.outputs.isPreviewRelease }}
        tag: ${{ needs.build.outputs.semVer2 }}
        commitish: ${{ github.ref }}
        publish: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Send announcement tweet!
      if: ${{ needs.build.outputs.isStableRelease == 'true' }}
      uses: ethomson/send-tweet-action@v1
      with:
        status: |
          Announcing the release of ExRam.Gremlinq ${{ needs.build.outputs.semVer2 }}!
          
          ExRam.Gremlinq is the first #dotnet object-graph-mapper for @apachetinkerpop #gremlin enabled #graphdbâ€Žs like @AzureCosmosDB, @awscloud Neptune or @JanusGraph.
          
          https://github.com/ExRam/ExRam.Gremlinq/releases/tag/${{ needs.build.outputs.semVer2 }}
        consumer-key: ${{ secrets.TWITTER_CONSUMER_API_KEY }}
        consumer-secret: ${{ secrets.TWITTER_CONSUMER_API_SECRET }}
        access-token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
