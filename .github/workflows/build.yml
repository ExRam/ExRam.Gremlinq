name: Build + Test

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      semVer2: ${{ steps.nbgv.outputs.SemVer2 }}
      isPrerelease: ${{ !!steps.nbgv.outputs.PrereleaseVersionNoLeadingHyphen }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: 'true'

    - name: Setup .NET Core 5.0.102
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.102

    - name: Install dotnet-validate
      run: dotnet tool install -g dotnet-validate --version 0.0.1-preview.51

    - name: Determine semantic version
      uses: dotnet/nbgv@master
      id: nbgv

    - name: Build
      run: dotnet build --configuration Release -p:ContinuousIntegrationBuild=true

    - name: Validate nuget packages
      run: dotnet validate package local **/ExRam.*.nupkg

    - name: Copy NuGet packages to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: NuGetPackages
        path: ./**/ExRam.*.nupkg
        if-no-files-found: error

  test:
    runs-on: ubuntu-latest

    services:
      gremlinServer:
        image: tinkerpop/gremlin-server
        ports:
          - 8182:8182

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: 'true'

    - name: Setup .NET Core 5.0.102
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.102

    - name: Test
      run: dotnet test  --configuration Release --verbosity normal -p:RunGremlinServerIntegrationTests=${{ github.event_name == 'push' }}

  publish:
    needs: [ build, test ]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}

    steps:
    - name: Setup .NET Core 5.0.102
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.102

    - uses: actions/download-artifact@v2
      with:
        name: NuGetPackages

    - name: Push NuGet packages to GitHub packages
      if: ${{ github.ref == 'refs/heads/main' }}
      run: dotnet nuget push **/ExRam.*.nupkg
        --source https://nuget.pkg.github.com/exram/index.json
        --api-key ${{ secrets.GITHUB_TOKEN }}
        --no-symbols true
        --skip-duplicate

    - name: Push NuGet packages to NuGet.org
      if: ${{ github.ref == 'refs/heads/rel' }}
      run: dotnet nuget push **/ExRam.*.nupkg
        --source https://api.nuget.org/v3/index.json
        --api-key ${{ secrets.NUGET_DEPLOY_KEY }}
        --no-symbols true
        --skip-duplicate

  announce:
    needs: [ build, publish ]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/rel' }}

    steps:
    - name: Bump version and push tag
      uses: mathieudutour/github-tag-action@v5.1
      with:
        custom_tag: ${{ needs.build.outputs.semVer2 }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Draft release
      uses: release-drafter/release-drafter@v5.13.0
      with:
        name: ExRam.Gremlinq ${{ needs.build.outputs.semVer2 }}
        prerelease: ${{ needs.build.outputs.isPrerelease }}
        tag: ${{ needs.build.outputs.semVer2 }}
        publish: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Send announcement tweet!
      uses: ethomson/send-tweet-action@v1
      with:
        status: |
          Announcing the release of ExRam Gremlinq ${{ needs.build.outputs.semVer2 }}!
          
          ExRam.Gremlinq is the first #dotnet object-graph-mapper for @apachetinkerpop #gremlin enabled #graphdbâ€Žs like @AzureCosmosDB, #AWS #Neptune or @JanusGraph.
          
          https://github.com/ExRam/ExRam.Gremlinq/releases/tag/${{ needs.build.outputs.semVer2 }}
        consumer-key: ${{ secrets.TWITTER_CONSUMER_API_KEY }}
        consumer-secret: ${{ secrets.TWITTER_CONSUMER_API_SECRET }}
        access-token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
