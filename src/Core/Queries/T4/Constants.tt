<#
    var baseInterfaces = new[]
    {
        "IGremlinQueryBase",
        "IElementGremlinQueryBase",
        "IEdgeOrVertexGremlinQueryBase",
        "IVertexGremlinQueryBase",
        "IEdgeGremlinQueryBase",
        "IPropertyGremlinQueryBase",


        "IGremlinQuery<T1>",
        "IMapGremlinQuery<T1>",
        "IArrayGremlinQuery<TArray, TArrayItem, TOriginalQuery>",
        "IElementGremlinQuery<T1>",
        "IEdgeOrVertexGremlinQuery<T1>",
        "IVertexGremlinQuery<TVertex>",
        "IEdgeGremlinQuery<TEdge>",
        "IInOrOutEdgeGremlinQuery<TEdge, TAdjacentVertex>",
        "IEdgeGremlinQuery<TEdge, T2, T3>",
        "IInEdgeGremlinQuery<TEdge, T3>",
        "IOutEdgeGremlinQuery<TEdge, T2>",
        "IVertexPropertyGremlinQuery<TProperty, TValue>",
        "IVertexPropertyGremlinQuery<TProperty, TValue, TMeta>",
        "IPropertyGremlinQuery<T1>"
    };

    var substitutedBaseInterfaces = baseInterfaces
        .Select(x => x
            .Replace("TVertex", "T1")
            .Replace("TEdge", "T1")
            .Replace("TAdjacentVertex", "T2")
            .Replace("TProperty", "T1")
            .Replace("TValue", "TScalar")
            .Replace("TArrayItem", "TScalar")
            .Replace("TArray", "T1")
            .Replace("TOriginalQuery", "TFoldedQuery"));
#>