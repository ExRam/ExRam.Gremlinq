[
  {
    Item1: AddEStep,
    Item2: {
      Label: string,
      SideEffectSemanticsChange: Write
    }
  },
  {
    Item1: AddEStep.FromLabelStep,
    Item2: {
      StepLabel: {}
    }
  },
  {
    Item1: AddEStep.FromTraversalStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: AddEStep.ToLabelStep,
    Item2: {
      StepLabel: {}
    }
  },
  {
    Item1: AddEStep.ToTraversalStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: AddVStep,
    Item2: {
      Label: string,
      SideEffectSemanticsChange: Write
    }
  },
  {
    Item1: AggregateStep,
    Item2: {
      Scope: {
        EnumName: Scope,
        EnumValue: global
      },
      StepLabel: {},
      SideEffectSemanticsChange: Write
    }
  },
  {
    Item1: AndStep,
    Item2: {
      Name: and,
      Traversals: [
        [
          {}
        ],
        [
          {}
        ],
        [
          {}
        ]
      ]
    }
  },
  {
    Item1: AsStep,
    Item2: {
      StepLabel: {}
    }
  },
  {
    Item1: BarrierStep,
    Item2: {}
  },
  {
    Item1: BothEStep,
    Item2: {}
  },
  {
    Item1: BothStep,
    Item2: {}
  },
  {
    Item1: BothVStep,
    Item2: {}
  },
  {
    Item1: CapStep,
    Item2: {
      StepLabel: {}
    }
  },
  {
    Item1: ChooseOptionTraversalStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: ChoosePredicateStep,
    Item2: {
      Predicate: {
        OperatorName: between,
        Value: [
          string,
          string,
          string
        ]
      },
      ThenTraversal: [
        {}
      ],
      ElseTraversal: [
        {}
      ]
    }
  },
  {
    Item1: ChooseTraversalStep,
    Item2: {
      IfTraversal: [
        {}
      ],
      ThenTraversal: [
        {}
      ],
      ElseTraversal: [
        {}
      ]
    }
  },
  {
    Item1: CoalesceStep,
    Item2: {
      Traversals: [
        [
          {}
        ],
        [
          {}
        ],
        [
          {}
        ]
      ]
    }
  },
  {
    Item1: CoinStep,
    Item2: {
      Probability: 47.11
    }
  },
  {
    Item1: ConstantStep,
    Item2: {
      Value: string
    }
  },
  {
    Item1: CountStep,
    Item2: {
      Scope: {
        EnumName: Scope,
        EnumValue: global
      }
    }
  },
  {
    Item1: CyclicPathStep,
    Item2: {}
  },
  {
    Item1: DedupStep,
    Item2: {
      Scope: {
        EnumName: Scope,
        EnumValue: global
      }
    }
  },
  {
    Item1: DropStep,
    Item2: {
      SideEffectSemanticsChange: Write
    }
  },
  {
    Item1: EmitStep,
    Item2: {}
  },
  {
    Item1: EStep,
    Item2: {
      Ids: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: ExplainStep,
    Item2: {}
  },
  {
    Item1: FailStep,
    Item2: {
      Message: string
    }
  },
  {
    Item1: FilterStep.ByLambdaStep,
    Item2: {
      Lambda: {
        LambdaExpression: lambda,
        Language: gremlin-groovy,
        Arguments: -1
      },
      SideEffectSemanticsChange: Write
    }
  },
  {
    Item1: FilterStep.ByTraversalStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: FlatMapStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: FoldStep,
    Item2: {}
  },
  {
    Item1: GroupStep,
    Item2: {}
  },
  {
    Item1: GroupStep.ByTraversalStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: GroupStep.ByKeyStep,
    Item2: {
      Key: {
        RawKey: {
          EnumName: T,
          EnumValue: id
        }
      }
    }
  },
  {
    Item1: HasKeyStep,
    Item2: {
      Argument: string
    }
  },
  {
    Item1: HasLabelStep,
    Item2: {
      Labels: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: HasNotStep,
    Item2: {
      Key: {
        RawKey: {
          EnumName: T,
          EnumValue: id
        }
      }
    }
  },
  {
    Item1: HasPredicateStep,
    Item2: {
      Key: {
        RawKey: {
          EnumName: T,
          EnumValue: id
        }
      },
      Predicate: {
        OperatorName: between,
        Value: [
          string,
          string,
          string
        ]
      }
    }
  },
  {
    Item1: HasStep,
    Item2: {
      Key: {
        RawKey: {
          EnumName: T,
          EnumValue: id
        }
      }
    }
  },
  {
    Item1: HasTraversalStep,
    Item2: {
      Key: {
        RawKey: {
          EnumName: T,
          EnumValue: id
        }
      },
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: HasValueStep,
    Item2: {
      Argument: string
    }
  },
  {
    Item1: IdentityStep,
    Item2: {}
  },
  {
    Item1: IdStep,
    Item2: {}
  },
  {
    Item1: InEStep,
    Item2: {}
  },
  {
    Item1: InjectStep,
    Item2: {
      Elements: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: InStep,
    Item2: {}
  },
  {
    Item1: InVStep,
    Item2: {}
  },
  {
    Item1: IsStep,
    Item2: {
      Predicate: {
        OperatorName: between,
        Value: [
          string,
          string,
          string
        ]
      }
    }
  },
  {
    Item1: KeyStep,
    Item2: {}
  },
  {
    Item1: LabelStep,
    Item2: {}
  },
  {
    Item1: LimitStep,
    Item2: {
      Count: 4711,
      Scope: {
        EnumName: Scope,
        EnumValue: global
      }
    }
  },
  {
    Item1: LocalStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: MapStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: MatchStep,
    Item2: {
      Traversals: [
        [
          {}
        ],
        [
          {}
        ],
        [
          {}
        ]
      ]
    }
  },
  {
    Item1: MaxStep,
    Item2: {
      Scope: {
        EnumName: Scope,
        EnumValue: global
      }
    }
  },
  {
    Item1: MeanStep,
    Item2: {
      Scope: {
        EnumName: Scope,
        EnumValue: global
      }
    }
  },
  {
    Item1: MinStep,
    Item2: {
      Scope: {
        EnumName: Scope,
        EnumValue: global
      }
    }
  },
  {
    Item1: NoneStep,
    Item2: {}
  },
  {
    Item1: NotStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: OptionalStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: OptionTraversalStep,
    Item2: {
      Guard: string,
      OptionTraversal: [
        {}
      ]
    }
  },
  {
    Item1: OrderStep,
    Item2: {
      Scope: {
        EnumName: Scope,
        EnumValue: global
      }
    }
  },
  {
    Item1: OrderStep.ByLambdaStep,
    Item2: {
      Lambda: {
        LambdaExpression: lambda,
        Language: gremlin-groovy,
        Arguments: -1
      },
      SideEffectSemanticsChange: Write
    }
  },
  {
    Item1: OrderStep.ByMemberStep,
    Item2: {
      Order: {
        EnumName: Order,
        EnumValue: asc
      },
      Key: {
        RawKey: {
          EnumName: T,
          EnumValue: id
        }
      }
    }
  },
  {
    Item1: OrderStep.ByTraversalStep,
    Item2: {
      Order: {
        EnumName: Order,
        EnumValue: asc
      },
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: OrStep,
    Item2: {
      Name: or,
      Traversals: [
        [
          {}
        ],
        [
          {}
        ],
        [
          {}
        ]
      ]
    }
  },
  {
    Item1: OtherVStep,
    Item2: {}
  },
  {
    Item1: OutEStep,
    Item2: {}
  },
  {
    Item1: OutStep,
    Item2: {}
  },
  {
    Item1: OutVStep,
    Item2: {}
  },
  {
    Item1: PathStep,
    Item2: {}
  },
  {
    Item1: ProfileStep,
    Item2: {}
  },
  {
    Item1: ProjectEdgeStep,
    Item2: {}
  },
  {
    Item1: ProjectStep,
    Item2: {
      Projections: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: ProjectStep.ByTraversalStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: ProjectStep.ByKeyStep,
    Item2: {
      Key: {
        RawKey: {
          EnumName: T,
          EnumValue: id
        }
      }
    }
  },
  {
    Item1: ProjectVertexStep,
    Item2: {}
  },
  {
    Item1: PropertiesStep,
    Item2: {
      Keys: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: PropertyStep.ByKeyStep,
    Item2: {
      Key: {
        RawKey: {
          EnumName: T,
          EnumValue: id
        }
      },
      Value: string,
      Cardinality: {
        EnumName: Cardinality,
        EnumValue: single
      },
      SideEffectSemanticsChange: Write
    }
  },
  {
    Item1: PropertyStep.ByTraversalStep,
    Item2: {
      Traversal: [
        {}
      ],
      Value: string,
      Cardinality: {
        EnumName: Cardinality,
        EnumValue: single
      },
      SideEffectSemanticsChange: Write
    }
  },
  {
    Item1: RangeStep,
    Item2: {
      Lower: 4711,
      Upper: 4711,
      Scope: {
        EnumName: Scope,
        EnumValue: global
      }
    }
  },
  {
    Item1: RepeatStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: SelectColumnStep,
    Item2: {
      Column: {
        EnumName: Column,
        EnumValue: keys
      }
    }
  },
  {
    Item1: SelectKeysStep,
    Item2: {
      Keys: [
        {
          RawKey: {
            EnumName: T,
            EnumValue: id
          }
        }
      ]
    }
  },
  {
    Item1: SelectStepLabelStep,
    Item2: {
      StepLabels: [
        {}
      ]
    }
  },
  {
    Item1: SideEffectStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: SimplePathStep,
    Item2: {}
  },
  {
    Item1: SkipStep,
    Item2: {
      Count: 4711,
      Scope: {
        EnumName: Scope,
        EnumValue: global
      }
    }
  },
  {
    Item1: SumStep,
    Item2: {
      Scope: {
        EnumName: Scope,
        EnumValue: global
      }
    }
  },
  {
    Item1: TailStep,
    Item2: {
      Count: 4711,
      Scope: {
        EnumName: Scope,
        EnumValue: global
      }
    }
  },
  {
    Item1: TimesStep,
    Item2: {
      Count: 4711
    }
  },
  {
    Item1: UnfoldStep,
    Item2: {}
  },
  {
    Item1: UnionStep,
    Item2: {
      Traversals: [
        [
          {}
        ],
        [
          {}
        ],
        [
          {}
        ]
      ]
    }
  },
  {
    Item1: UntilStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: ValueMapStep,
    Item2: {
      Keys: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: ValuesStep,
    Item2: {
      Keys: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: ValueStep,
    Item2: {}
  },
  {
    Item1: VStep,
    Item2: {
      Ids: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: WherePredicateStep,
    Item2: {
      Predicate: {
        OperatorName: between,
        Value: [
          string,
          string,
          string
        ]
      }
    }
  },
  {
    Item1: WherePredicateStep.ByMemberStep,
    Item2: {
      Key: {
        RawKey: {
          EnumName: T,
          EnumValue: id
        }
      }
    }
  },
  {
    Item1: WhereStepLabelAndPredicateStep,
    Item2: {
      Predicate: {
        OperatorName: between,
        Value: [
          string,
          string,
          string
        ]
      },
      StepLabel: {}
    }
  },
  {
    Item1: WhereTraversalStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  },
  {
    Item1: WithoutStrategiesStep,
    Item2: {
      StrategyTypes: [
        object,
        object,
        object
      ]
    }
  },
  {
    Item1: WithSideEffectStep,
    Item2: {
      Value: string,
      Label: {}
    }
  },
  {
    Item1: WithStrategiesStep,
    Item2: {
      Traversal: [
        {}
      ]
    }
  }
]